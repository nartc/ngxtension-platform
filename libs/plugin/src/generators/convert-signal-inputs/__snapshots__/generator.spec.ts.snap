// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convertSignalInputsGenerator should convert properly 1`] = `
"
import { Component, Input, input } from '@angular/core';

@Component({

      template: \`
    <div>{{ inputWithoutType() }}</div>

<div [id]="normalInput()">{{ withoutDefault() }}</div>

@if (withoutDefaultUnion()) {
  <app-test [acceptsString]="withoutDefaultUnion()" />

  @if (withoutDefaultAlias()) {
    <app-test [acceptsString]="withoutDefaultAlias() || withoutDefaultUnion()" />
  }
}

<ng-container *ngIf="withDefaultAlias()">
  <app-test [acceptsString]="withDefaultAlias()" />

  <ng-container *ngIf="withoutDefaultAlias()">
    <app-test [acceptsString]="withoutDefaultAlias() || withDefaultAlias()" />
  </ng-container>
</ng-container>

<test [normalInput]="normalInput()" />
<test-normalInput />
<normalInput />
<another-component something="blah-normalInput" />

<a normalInput [routerLink]="['test-normalInput', '/normalInput' , normalInput(), 'normalInput']">
 normalInput - {{ normalInput() }}
</a>

<button (click)="normalInput() = 123"></button>
<button (click)="normalInput() = 'normalInput'"></button>
<button (click)="someFunctionWithnormalInput('normalInput', normalInput())"></button>
<button (normalInput)="someFunctionWithnormalInput(normalInput(), 'normalInput')"></button>
<button (eventWithnormalInput)="test = 'normalInput' + normalInput()"></button>

<a>
 {{ 'someNormalTextnormalInput' | translate: 'normalInput' }}

 {{ normalInput() | translate: normalInput() }}
 {{ normalInput() | translate: 'normalInput' }}
 {{ 'normalInput' | translate: 'normalInput' }}
 {{ 'normalInput' | translate: normalInput() }}
</a>

<input name="normalInput" [(ngModel)]="normalInput" />
<cmp name="normalInput" [(ngModel)]="normalInput"></cmp>
<cmp [name]="normalInput()"></cmp>
<cmp name="withnormalInput"></cmp>
<cmp normalInput="normalInput"></cmp>

<p>{{ data().normalInput }}</p>

  \`
})
export class MyCmp {
  inputWithoutType = input();
  normalInput = input('');
  withoutDefault = input<string>();
  withoutDefaultUnion = input<string>();
  withDefaultAlias = input(123, { alias: 'defaultAlias' });
  withoutDefaultAlias = input<number | undefined>(undefined, { alias: 'noDefaultAlias' });
  justAStringAlias = input('', { alias: 'stringAlias' });
  withTransform = input<boolean, string | ''>(booleanAttribute(false), { transform: booleanAttribute });
  requiredInput = input.required<string>();
  requiredWithAlias = input.required<boolean>({ alias: 'requiredAlias' });
  requiredWithAliasAndTransform = input.required<number, string | ''>({ alias: 'transformedRequiredAlias', transform: numberAttribute });

  @Input() set leaveMeAlone(value: number) {
    console.log('setter', value);
  }

  ngOnInit() {
    let imABoolean = false;
    console.log(this.justAStringAlias());

    if (this.withTransform()) {
      imABoolean = this.withTransform()!;
    }
  }

  handleClick() {
    if (this.requiredInput()) {
      let test = this.requiredInput()! + this.requiredWithAlias();
    } else {
      let test = this.requiredWithAliasAndTransform() + this.requiredWithAlias();
    }
  }

;
;
;
;
;
;
;
;
;
;
;
}
"
`;

exports[`convertSignalInputsGenerator should convert properly for issue #236 1`] = `
"import { input } from "@angular/core";

@Component({
  selector: 'app-request-info',
  templateUrl: './request-info.component.html',
  standalone: true,
  imports: [
    ReactiveFormsModule,
    MatFormFieldModule,
    MatIconModule,
    MatInputModule,
    MatButtonModule,
    AsyncPipe,
    NgIf,
  ],
})
export class RequestInfoComponent implements OnInit {
  #formBuilder = inject(NonNullableFormBuilder);
  #lookuper = inject(AddressLookuper);

  formGroup = this.#formBuilder.group({
    address: [''],
  });
  title = 'Request More Information';
  address = input('');
  submitter$ = new Subject<void>();
  lookupResult$: Observable<string> | undefined;

  ngOnInit(): void {
    if (this.address()) {
      this.formGroup.setValue({ address: this.address()! });
    }

    this.lookupResult$ = this.submitter$.pipe(
      switchMap(() => {
        assertDefined(this.formGroup.value.address);
        return this.#lookuper.lookup(this.formGroup.value.address);
      }),
      map((found) => (found ? 'Brochure sent' : 'Address not found')),
    );
  }

  search(): void {
    this.submitter$.next();
  }

;
}"
`;

exports[`convertSignalInputsGenerator should convert properly for templateUrl 1`] = `
"
import { Component, Input, input } from '@angular/core';

@Component({
  templateUrl: './my-file.html'
})
export class MyCmp {
  inputWithoutType = input();
  normalInput = input('');
  withoutDefault = input<string>();
  withoutDefaultUnion = input<string>();
  withDefaultAlias = input(123, { alias: 'defaultAlias' });
  withoutDefaultAlias = input<number | undefined>(undefined, { alias: 'noDefaultAlias' });
  justAStringAlias = input('', { alias: 'stringAlias' });
  withTransform = input<boolean, string | ''>(booleanAttribute(false), { transform: booleanAttribute });
  requiredInput = input.required<string>();
  requiredWithAlias = input.required<boolean>({ alias: 'requiredAlias' });
  /*
   * @description I go with requiredWithAliasAndTransform
   */
  requiredWithAliasAndTransform = input.required<number, string | ''>({ alias: 'transformedRequiredAlias', transform: numberAttribute });

  @Input() set leaveMeAlone(value: number) {
    console.log('setter', value);
  }

  ngOnInit() {
    let imABoolean = false;
    console.log(this.justAStringAlias());

    if (this.withTransform()) {
      imABoolean = this.withTransform()!;
    }

    const ternary = this.withoutDefault() ? this.withoutDefault()!.toString() : null;
    const optional = this.withoutDefaultAlias()?.toString() || null;
  }

  handleClick() {
    if (this.requiredInput()) {
      let test = this.requiredInput()! + this.requiredWithAlias();
    } else {
      let test = this.requiredWithAliasAndTransform() + this.requiredWithAlias();
    }
  }

;
;
;
;
;
;
;
;
;
;
;
}
"
`;

exports[`convertSignalInputsGenerator should convert properly for templateUrl 2`] = `
"<div>{{ inputWithoutType() }}</div>

<div [id]="normalInput()">{{ withoutDefault() }}</div>

@if (withoutDefaultUnion()) {
  <app-test [acceptsString]="withoutDefaultUnion()" />

  @if (withoutDefaultAlias()) {
    <app-test [acceptsString]="withoutDefaultAlias() || withoutDefaultUnion()" />
  }
}

<ng-container *ngIf="withDefaultAlias()">
  <app-test [acceptsString]="withDefaultAlias()" />

  <ng-container *ngIf="withoutDefaultAlias()">
    <app-test [acceptsString]="withoutDefaultAlias() || withDefaultAlias()" />
  </ng-container>
</ng-container>

<test [normalInput]="normalInput()" />
<test-normalInput />
<normalInput />
<another-component something="blah-normalInput" />

<a normalInput [routerLink]="['test-normalInput', '/normalInput' , normalInput(), 'normalInput']">
 normalInput - {{ normalInput() }}
</a>

<button (click)="normalInput() = 123"></button>
<button (click)="normalInput() = 'normalInput'"></button>
<button (click)="someFunctionWithnormalInput('normalInput', normalInput())"></button>
<button (normalInput)="someFunctionWithnormalInput(normalInput(), 'normalInput')"></button>
<button (eventWithnormalInput)="test = 'normalInput' + normalInput()"></button>

<a>
 {{ 'someNormalTextnormalInput' | translate: 'normalInput' }}

 {{ normalInput() | translate: normalInput() }}
 {{ normalInput() | translate: 'normalInput' }}
 {{ 'normalInput' | translate: 'normalInput' }}
 {{ 'normalInput' | translate: normalInput() }}
</a>

<cmp name="normalInput"></cmp>
<cmp [name]="normalInput()"></cmp>
<cmp name="withnormalInput"></cmp>
<cmp normalInput="normalInput"></cmp>

<p>{{ data().normalInput }}</p>
"
`;

exports[`convertSignalInputsGenerator should remove old import and append new one 1`] = `
"
import { Component, input } from '@angular/core';

@Component({})
export class MyCmp {
  hello = input<string>();
;
}
"
`;

exports[`convertSignalInputsGenerator should remove old import and append new one 2`] = `undefined`;
