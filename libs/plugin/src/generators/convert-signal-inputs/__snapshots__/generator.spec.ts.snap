// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convertSignalInputsGenerator should convert properly 1`] = `
"
import { Component, Input } from '@angular/core';
import { input } from "@angular/core";

@Component({
  
      template: \`
    <div>{{ inputWithoutType() }}</div>

<div [id]="normalInput()">{{ withoutDefault() }}</div>

@if (withoutDefaultUnion()) {
  <app-test [acceptsString]="withoutDefaultUnion()" />

  @if (withoutDefaultAlias()) {
    <app-test [acceptsString]="withoutDefaultAlias() || withoutDefaultUnion()" />
  }
}

<ng-container *ngIf="withDefaultAlias()">
  <app-test [acceptsString]="withDefaultAlias()" />

  <ng-container *ngIf="withoutDefaultAlias()">
    <app-test [acceptsString]="withoutDefaultAlias() || withDefaultAlias()" />
  </ng-container>
</ng-container>
  \`
})
export class MyCmp {
  inputWithoutType = input();
  normalInput = input('');
  withoutDefault = input<string | undefined>();
  withoutDefaultUnion = input<string | undefined>();
  withDefaultAlias = input(123, { alias: 'defaultAlias' });
  withoutDefaultAlias = input<number | undefined>(undefined, { alias: 'noDefaultAlias' });
  justAStringAlias = input('', { alias: 'stringAlias' });
  withTransform = input<boolean, string | ''>(booleanAttribute(false), { transform: booleanAttribute });
  requiredInput = input.required<string>();
  requiredWithAlias = input.required<boolean>({ alias: 'requiredAlias' });
  requiredWithAliasAndTransform = input.required<number, string | ''>({ alias: 'transformedRequiredAlias', transform: numberAttribute });

  @Input() set leaveMeAlone(value: number) {
    console.log('setter', value);
  }

  ngOnInit() {
    let imABoolean = false;
    console.log(this.justAStringAlias());

    if (this.withTransform()) {
      imABoolean = this.withTransform()!;
    }
  }

  handleClick() {
    if (this.requiredInput()) {
      let test = this.requiredInput()! + this.requiredWithAlias();
    } else {
      let test = this.requiredWithAliasAndTransform() + this.requiredWithAlias();
    }
  }

;
;
;
;
;
;
;
;
;
;
;
}
"
`;

exports[`convertSignalInputsGenerator should convert properly for templateUrl 1`] = `
"
import { Component, Input } from '@angular/core';
import { input } from "@angular/core";

@Component({
  templateUrl: './my-file.html'
})
export class MyCmp {
  inputWithoutType = input();
  normalInput = input('');
  withoutDefault = input<string | undefined>();
  withoutDefaultUnion = input<string | undefined>();
  withDefaultAlias = input(123, { alias: 'defaultAlias' });
  withoutDefaultAlias = input<number | undefined>(undefined, { alias: 'noDefaultAlias' });
  justAStringAlias = input('', { alias: 'stringAlias' });
  withTransform = input<boolean, string | ''>(booleanAttribute(false), { transform: booleanAttribute });
  requiredInput = input.required<string>();
  requiredWithAlias = input.required<boolean>({ alias: 'requiredAlias' });
  /*
   * @description I go with requiredWithAliasAndTransform
   */
  requiredWithAliasAndTransform = input.required<number, string | ''>({ alias: 'transformedRequiredAlias', transform: numberAttribute });

  @Input() set leaveMeAlone(value: number) {
    console.log('setter', value);
  }

  ngOnInit() {
    let imABoolean = false;
    console.log(this.justAStringAlias());

    if (this.withTransform()) {
      imABoolean = this.withTransform()!;
    }

    const ternary = this.withoutDefault() ? this.withoutDefault()!.toString() : null;
    const optional = this.withoutDefaultAlias()?.toString() || null;
  }

  handleClick() {
    if (this.requiredInput()) {
      let test = this.requiredInput()! + this.requiredWithAlias();
    } else {
      let test = this.requiredWithAliasAndTransform() + this.requiredWithAlias();
    }
  }

;
;
;
;
;
;
;
;
;
;
;
}
"
`;

exports[`convertSignalInputsGenerator should convert properly for templateUrl 2`] = `
"<div>{{ inputWithoutType() }}</div>

<div [id]="normalInput()">{{ withoutDefault() }}</div>

@if (withoutDefaultUnion()) {
  <app-test [acceptsString]="withoutDefaultUnion()" />

  @if (withoutDefaultAlias()) {
    <app-test [acceptsString]="withoutDefaultAlias() || withoutDefaultUnion()" />
  }
}

<ng-container *ngIf="withDefaultAlias()">
  <app-test [acceptsString]="withDefaultAlias()" />

  <ng-container *ngIf="withoutDefaultAlias()">
    <app-test [acceptsString]="withoutDefaultAlias() || withDefaultAlias()" />
  </ng-container>
</ng-container>"
`;
